{"version":3,"sources":["components/EmployeeCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/Filter/index.js","components/Sort/index.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeCard","props","className","name","occupation","team","tenure","location","email","Wrapper","children","Title","Filter","htmlFor","onChange","handleInputChange","value","type","placeholder","id","onClick","handleFilterSubmit","handleFilterClear","Sort","handleSortName","handleSortTenure","handleSortLocation","App","state","employees","event","target","setState","preventDefault","filterTeam","search","filter","employee","sort","a","b","localeCompare","this","map","key","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d5fbd968.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction EmployeeCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"content\">\n        <h2>{props.name}</h2>\n        <h4>{props.occupation}</h4>\n        <ul>\n          <li>\n          <strong>Team: </strong>{props.team}\n          </li>\n          <li>\n          <strong>Tenure: </strong>{props.tenure}\n          </li>\n          <li>\n          <strong>Location: </strong>{props.location}\n          </li>\n          <li>\n          <strong>Email: </strong>{props.email}\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default EmployeeCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"team-heading\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Filter(props) {\n  return (\n    <form>\n      <div className=\"form-group\">\n        <label htmlFor=\"search\">Search by Team</label>\n        <input\n          onChange={props.handleInputChange}\n          value={props.value}\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Enter Team\"\n          id=\"search\"\n        />\n      \n        <button onClick={props.handleFilterSubmit} className=\"btn btn-primary\">\n          Filter\n        </button>\n        <button onClick={props.handleFilterClear} className=\"btn btn-primary\">\n          Clear Filter\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default Filter;\n\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Sort(props) {\n  return (\n    <form>\n      <div className=\"form-group\">\n        <label htmlFor=\"search\">Sort by:</label>\n        <br/>\n        <button onClick={props.handleSortName} className=\"btn btn-primary\">\n          Name\n        </button>\n        <button onClick={props.handleSortTenure} className=\"btn btn-primary\">\n          Tenure\n        </button>\n        <button onClick={props.handleSortLocation} className=\"btn btn-primary\">\n          Location\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default Sort;\n","import React, { Component } from \"react\";\nimport EmployeeCard from \"./components/EmployeeCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Filter from \"./components/Filter\"\nimport Sort from \"./components/Sort\"\nimport employees from \"./employees.json\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    employees\n  };\n\n  handleInputChange = event => {\n    const value = event.target.value;\n    const name = event.target.name;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleFilterSubmit = event => {\n    event.preventDefault();\n    // this.state.search\n     this.filterTeam(this.state.search);\n  };\n  handleFilterClear= event => {\n    event.preventDefault();\n    // this.state.search\n    this.setState({ employees });\n  };\n\n  filterTeam = filter => {\n    const employees = this.state.employees.filter(employee => employee.team === filter);\n    this.setState({ employees });\n  }\n  handleSortName = event =>{\n    event.preventDefault();\n    const employees = this.state.employees.sort((a, b) => a.name.localeCompare(b.name))\n    this.setState({ employees });\n  }\n\n  handleSortTenure = event =>{\n    event.preventDefault();\n    const employees = this.state.employees.sort((a, b) => a.tenure-b.tenure)\n    this.setState({ employees });\n  }\n\n  handleSortLocation= event =>{\n    event.preventDefault();\n    const employees = this.state.employees.sort((a, b) => a.location.localeCompare(b.location))\n    this.setState({ employees });\n  }\n\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n        <div>\n            <Title>Employee Directory</Title>\n            <div className = \"container\">\n                <div className = \"row\">\n                    <div className = \"col-md-6\">\n                        <Filter\n                            value={this.state.search}\n                            handleInputChange={this.handleInputChange}\n                            handleFilterSubmit={this.handleFilterSubmit}\n                            handleFilterClear ={this.handleFilterClear}\n                        />\n                    </div>\n                    <div className = \"col-md-6\">\n                        <Sort\n                            value={this.state.search}\n                            handleSortName={this.handleSortName}\n                            handleSortTenure={this.handleSortTenure}\n                            handleSortLocation ={this.handleSortLocation}                            \n                        />\n                    </div>\n                </div>\n            </div>\n            <Wrapper> {this.state.employees.map(employee => (\n                <EmployeeCard\n\n                    id={employee.id}\n                    key={employee.id}\n                    name={employee.name}\n                    team={employee.team}\n                    email={employee.email}\n                    tenure={employee.tenure}\n                    occupation={employee.occupation}\n                    location={employee.location}\n                />\n                ))}\n            </Wrapper>\n        </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}